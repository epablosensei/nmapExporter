#!/usr/bin/python

# NmapExportReport
#
# Processes Nmap XML files to generate reports. The main action is to create an CSV
#
# Author:  Pablo Endres <epablo@pabloendres.com>
# Inspiration for latest version found in ndiff by Michael Pattrick

# Copyright (C) 2010 Pablo Endres <epablo@pabloendres.com>

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys

# Check if the given directory, and all its parent directories, are owned and
# writable only by our euid or by root. If symlinks are present, they are
# recursively checked, up to a limit of SYMLINK_LIMIT.
# https://www.securecoding.cert.org/confluence/display/seccode/FIO15-C.+Ensure+that+file+operations+are+performed+in+a+secure+directory
# Found this code in Zenmap

SYMLINK_LIMIT = 5
def is_secure_dir(path, num_symlinks=0):
    import os
    import os.path
    import stat

    if not os.path.isabs(path):
        return False

    if num_symlinks >= SYMLINK_LIMIT:
        return False

    dirs = []
    while True:
        dirs.append(path)
        dirname = os.path.dirname(path)
        if dirname == path:
            break
        path = dirname
    # Traverse root-to-leaf.
    dirs.reverse()

    for dir in dirs:
        if os.path.islink(dir):
            link = os.readlink(dir)
            if not is_secure_dir(link, num_symlinks + 1):
                return False
            continue
        if not os.path.isdir(dir):
            return False
        buf = os.stat(dir)
        if buf.st_uid != os.geteuid() and buf.st_uid != 0:
            return False
        if buf.st_mode & (stat.S_IWGRP | stat.S_IWOTH) != 0:
            return False

    return True

# Add the install_lib directory to sys.path, the list of directories searched
# for modules, but don't do it if the directory or its parents may be writable
# by other users. The following line is replaced by the installation program.
INSTALL_LIB = '/usr/lib/python2.7/site-packages'
if INSTALL_LIB is not None and is_secure_dir(INSTALL_LIB):
    sys.path.append(INSTALL_LIB)

try:
    import nmapExportReport
except ImportError, e:
    print >> sys.stderr, """\
Could not import the nmapExportReport module: %s.
I checked in these directories:""" % repr(e.message)
    for dir in sys.path:
        print >> sys.stderr, "    %s" % dir
    print >> sys.stderr, """\
If you installed nmapExportReport in another directory, you may have to add the
modules directory to the PYTHONPATH environment variable."""
    sys.exit(1)

import nmapExportReport

if __name__ == "__main__":
#    sys.excepthook = ndiff.excepthook
    sys.exit(nmapExportReport.main())
